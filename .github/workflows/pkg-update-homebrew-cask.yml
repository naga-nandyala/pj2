name: (pkg installer) - homebrew update

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to sync to the tap (e.g. 1.0.0). Leave empty to use latest pkg release."
        required: false
        type: string
      force_update:
        description: "Force update even if content appears unchanged"
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

permissions:
  contents: write

jobs:
  update-cask:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine target version
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Extract version from release tag, handling both pkg and regular releases
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            VERSION=${RELEASE_TAG#v}
            VERSION=${VERSION%-pkg}  # Remove -pkg suffix if present
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            # Find latest pkg release
            VERSION=$(gh release list --limit 20 --json tagName,publishedAt --jq '.[] | select(.tagName | contains("-pkg")) | .tagName' | head -1)
            if [ -z "$VERSION" ]; then
              echo "No pkg releases found, checking for regular releases..."
              VERSION=$(gh release list --limit 10 --json tagName,publishedAt --jq 'sort_by(.publishedAt) | reverse | .[0].tagName')
            fi
            VERSION=${VERSION#v}
            VERSION=${VERSION%-pkg}
          fi
          
          if [ -z "$VERSION" ]; then
            echo "Unable to resolve version" >&2
            exit 1
          fi
          
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Synchronising Homebrew tap for PKG version $VERSION"

      - name: Download release packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          rm -f *.pkg
          
          # Try to download from pkg-specific release first
          if gh release view "v${VERSION}-pkg" >/dev/null 2>&1; then
            echo "Downloading from pkg release: v${VERSION}-pkg"
            gh release download "v${VERSION}-pkg" --pattern "*.pkg"
          else
            echo "Downloading from regular release: v${VERSION}"
            gh release download "v${VERSION}" --pattern "*.pkg"
          fi
          
          ls -al *.pkg

      - name: Calculate SHA256 checksums
        id: shas
        run: |
          set -euo pipefail
          
          ARM64_PKG=$(find . -maxdepth 1 -name '*.pkg' | grep -E '(arm64|aarch64)\.pkg$' | head -1)
          X86_PKG=$(find . -maxdepth 1 -name '*.pkg' | grep -E 'x86_64\.pkg$' | head -1)
          
          if [ -z "$ARM64_PKG" ] || [ -z "$X86_PKG" ]; then
            echo "Expected both arm64 and x86_64 packages" >&2
            echo "Available packages:"
            ls -al *.pkg
            exit 1
          fi
          
          ARM64_SHA=$(shasum -a 256 "$ARM64_PKG" | cut -d' ' -f1)
          X86_SHA=$(shasum -a 256 "$X86_PKG" | cut -d' ' -f1)
          
          echo "arm64_filename=$(basename "$ARM64_PKG")" >> "$GITHUB_OUTPUT"
          echo "x86_filename=$(basename "$X86_PKG")" >> "$GITHUB_OUTPUT"
          echo "arm64_sha=$ARM64_SHA" >> "$GITHUB_OUTPUT"
          echo "x86_sha=$X86_SHA" >> "$GITHUB_OUTPUT"
          
          echo "Checksums calculated:"
          echo "  arm64: $ARM64_PKG -> $ARM64_SHA"
          echo "  x86_64: $X86_PKG -> $X86_SHA"

      - name: Check out Homebrew tap repository
        uses: actions/checkout@v4
        with:
          repository: naga-nandyala/homebrew-mycli-app
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          persist-credentials: false
          path: homebrew-tap

      - name: Configure tap push credentials
        run: |
          TAP_PAT="${{ secrets.HOMEBREW_TAP_TOKEN }}"
          if [ -z "$TAP_PAT" ]; then
            echo "HOMEBREW_TAP_TOKEN is required to push to naga-nandyala/homebrew-mycli-app." >&2
            echo "Create a fine-grained personal access token with repo:write and add it as HOMEBREW_TAP_TOKEN." >&2
            exit 1
          fi
          cd homebrew-tap
          git remote set-url origin "https://x-access-token:${TAP_PAT}@github.com/naga-nandyala/homebrew-mycli-app.git"

      - name: Update cask file for .pkg
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          ARM64_SHA="${{ steps.shas.outputs.arm64_sha }}"
          X86_SHA="${{ steps.shas.outputs.x86_sha }}"
          ARM64_FILE="${{ steps.shas.outputs.arm64_filename }}"
          X86_FILE="${{ steps.shas.outputs.x86_filename }}"

          cd homebrew-tap
          mkdir -p Casks
          
          # Determine release tag format
          RELEASE_TAG="v${VERSION}"
          if gh release view "v${VERSION}-pkg" >/dev/null 2>&1; then
            RELEASE_TAG="v${VERSION}-pkg"
          fi
          
          cat > Casks/mycli-app-pkg.rb << 'CASK_EOF'
          # NOTE: Auto-generated by naga-nandyala/pj2 workflow. Do not edit manually.
          cask "mycli-app-pkg" do
            version "__VERSION__"

            on_arm do
              sha256 "__ARM64_SHA__"
              url "https://github.com/naga-nandyala/pj2/releases/download/__RELEASE_TAG__/__ARM64_FILE__"
            end

            on_intel do
              sha256 "__X86_SHA__"
              url "https://github.com/naga-nandyala/pj2/releases/download/__RELEASE_TAG__/__X86_FILE__"
            end

            name "MyCLI App (PKG Installer)"
            desc "Azure-inspired CLI with native macOS installer"
            homepage "https://github.com/naga-nandyala/pj2"

            depends_on macos: ">= :catalina"

            pkg on_arm: "__ARM64_FILE__",
                on_intel: "__X86_FILE__"

            uninstall pkgutil: "com.naga-nandyala.mycli"

            caveats <<~EOS
              MyCLI installs directly to system locations:
                â€¢ Executable: /usr/local/bin/mycli
                â€¢ Runtime: /usr/local/libexec/mycli-venv/

              No symlinks or complex path resolution required.

              Basic usage:
                mycli --version
                mycli login
                mycli status

              To uninstall manually:
                sudo rm -f /usr/local/bin/mycli
                sudo rm -rf /usr/local/libexec/mycli-venv

              For the venv bundle version instead:
                brew install --cask naga-nandyala/mycli-app/mycli-app-venv-pj2
            EOS
          end
          CASK_EOF

          # Perform substitutions
          sed -i.bak "s/__VERSION__/$VERSION/g" Casks/mycli-app-pkg.rb
          sed -i.bak "s/__ARM64_SHA__/$ARM64_SHA/g" Casks/mycli-app-pkg.rb
          sed -i.bak "s/__X86_SHA__/$X86_SHA/g" Casks/mycli-app-pkg.rb
          sed -i.bak "s/__ARM64_FILE__/$ARM64_FILE/g" Casks/mycli-app-pkg.rb
          sed -i.bak "s/__X86_FILE__/$X86_FILE/g" Casks/mycli-app-pkg.rb
          sed -i.bak "s/__RELEASE_TAG__/$RELEASE_TAG/g" Casks/mycli-app-pkg.rb
          rm -f Casks/mycli-app-pkg.rb.bak

          if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
            echo "# Force updated: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> Casks/mycli-app-pkg.rb
          fi

          # Verify no placeholders remain
          if grep -q '__' Casks/mycli-app-pkg.rb; then
            echo "ERROR: Placeholder substitution failed" >&2
            sed -n '1,50p' Casks/mycli-app-pkg.rb
            exit 1
          fi

          # Validate Ruby syntax
          if command -v ruby >/dev/null 2>&1; then
            ruby -c Casks/mycli-app-pkg.rb
          else
            echo "Ruby not available for syntax check, skipping validation"
          fi
          
          echo "Generated cask file:"
          head -50 Casks/mycli-app-pkg.rb

      - name: Show pending changes
        run: |
          cd homebrew-tap
          git add -N Casks/mycli-app-pkg.rb || true
          echo '--- CASK DIFF ---'
          git diff --color=always Casks/mycli-app-pkg.rb || true
          echo '--- END DIFF ---'

      - name: Commit and push
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
          GITHUB_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          cd homebrew-tap
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          
          git add Casks/mycli-app-pkg.rb
          
          if git diff --cached --quiet; then
            if [ "${{ github.event.inputs.force_update }}" = "true" ]; then
              echo "No changes detected but force_update requested"
              echo "# Forced update: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> Casks/mycli-app-pkg.rb
              git add Casks/mycli-app-pkg.rb
            else
              echo "PKG cask already up to date for version $VERSION"
              exit 0
            fi
          fi
          
          git commit -m "Update mycli-app-pkg cask to $VERSION (auto-generated)"
          git push origin main
          
          echo "âœ… Homebrew PKG cask updated successfully"

      - name: Summary
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "ðŸŽ‰ PKG Cask Update Complete!"
          echo ""
          echo "Updated cask: mycli-app-pkg"
          echo "Version: $VERSION"
          echo "Repository: naga-nandyala/homebrew-mycli-app"
          echo ""
          echo "Users can now install with:"
          echo "  brew tap naga-nandyala/mycli-app"
          echo "  brew install --cask mycli-app-pkg"