name: (pkgnew installer) - sudoinstaller test

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version to test (e.g. 4.0.0 - without 'v' prefix)"
        required: true
        type: string

jobs:
  test-pkg-installation:
    name: Test PKG Install (${{ matrix.runner }}, ${{ matrix.arch }})
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-latest
            arch: arm64
          - runner: macos-13
            arch: x86_64

    steps:
      - name: Environment info
        run: |
          echo "=== Environment Information ==="
          echo "Runner: ${{ matrix.runner }}"
          echo "Architecture: ${{ matrix.arch }}"
          echo "macOS version: $(sw_vers -productVersion)"
          echo "Actual arch: $(uname -m)"
          echo "Available space: $(df -h / | tail -1 | awk '{print $4}')"

      - name: Clean previous installations
        run: |
          echo "=== Cleaning Previous Installations ==="

          # Remove any manual installations  
          sudo rm -f /usr/local/bin/mycli 2>/dev/null || true
          sudo rm -rf /usr/local/microsoft/mycli 2>/dev/null || true

          echo "✅ Previous installations cleaned"

      - name: Download and install PKG
        run: |
          echo "=== Download and Install PKG ==="

          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TAG="v${VERSION}"
          ARCH="${{ matrix.arch }}"
          PKG_FILENAME="mycli-${VERSION}-macos-${ARCH}.pkg"

          echo "Downloading PKG: $PKG_FILENAME"
          echo "From release: $RELEASE_TAG (version: $VERSION)"
          echo "Architecture: $ARCH"
          echo "Full URL: https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/${PKG_FILENAME}"

          # Download PKG file from GitHub releases
          curl -L -o "$PKG_FILENAME" \
            "https://github.com/${{ github.repository }}/releases/download/${RELEASE_TAG}/${PKG_FILENAME}"

          if [ -f "$PKG_FILENAME" ]; then
            echo "✅ PKG file downloaded successfully"
            echo "File size: $(ls -lh "$PKG_FILENAME" | awk '{print $5}')"
            
            # Check if file is too small (likely an error page)
            FILE_SIZE=$(stat -c%s "$PKG_FILENAME" 2>/dev/null || stat -f%z "$PKG_FILENAME")
            if [ "$FILE_SIZE" -lt 1000 ]; then
              echo "❌ Downloaded file is too small ($FILE_SIZE bytes), likely an error"
              echo "File contents:"
              cat "$PKG_FILENAME"
              echo ""
              echo "Available releases and assets:"
              curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | grep -E '"tag_name"|"name".*\.pkg' | head -20
              exit 1
            fi
          else
            echo "❌ Failed to download PKG file"
            exit 1
          fi

          # Install using sudo installer
          echo "Installing PKG using sudo installer..."
          sudo installer -pkg "$PKG_FILENAME" -target /

          echo "✅ PKG installation completed"

      - name: Verify installation structure
        run: |
          echo "=== Installation Structure Verification ==="

          # Check system installation paths
          echo "1. Executable location:"
          if [ -f /usr/local/bin/mycli ]; then
            ls -la /usr/local/bin/mycli
            echo "✅ Executable found at /usr/local/bin/mycli"
          else
            echo "❌ Executable NOT found at /usr/local/bin/mycli"
            exit 1
          fi

          echo ""
          echo "2. Runtime environment:"
          if [ -d /usr/local/microsoft/mycli ]; then
            echo "✅ Runtime found at /usr/local/microsoft/mycli"
            echo "   Size: $(du -sh /usr/local/microsoft/mycli | cut -f1)"
            echo "   Python executable:"
            ls -la /usr/local/microsoft/mycli/bin/python* 2>/dev/null | head -3
            echo ""
            echo "   Directory structure (2 levels):"
            tree /usr/local/microsoft/mycli -L 2 2>/dev/null || find /usr/local/microsoft/mycli -maxdepth 2 -type d | head -20
            echo ""
            echo "   Key subdirectories:"
            echo "   - bin/: $(ls /usr/local/microsoft/mycli/bin/ | wc -l) files"
            echo "   - lib/: $(ls /usr/local/microsoft/mycli/lib/ 2>/dev/null | wc -l) items"
            if [ -d /usr/local/microsoft/mycli/lib/python3.12/site-packages ]; then
              echo "   - site-packages/: $(ls /usr/local/microsoft/mycli/lib/python3.12/site-packages/ | wc -l) packages"
            fi
          else
            echo "❌ Runtime environment NOT found at /usr/local/microsoft/mycli"
            exit 1
          fi

          echo ""
          echo "3. PATH availability:"
          if command -v mycli >/dev/null 2>&1; then
            echo "✅ mycli available in PATH: $(which mycli)"
          else
            echo "❌ mycli NOT available in PATH"
            echo "PATH: $PATH"
            exit 1
          fi

          echo ""
          echo "4. Package manager records:"
          echo "Installed packages matching mycli:"
          pkgutil --pkgs | grep -i mycli || echo "No package records found"

          echo ""
          echo "5. Installation file structure overview:"
          echo "/usr/local structure (relevant parts):"
          echo "├── bin/"
          ls -la /usr/local/bin/mycli* 2>/dev/null || echo "   (no mycli files in bin/)"
          echo "└── microsoft/"
          if [ -d /usr/local/microsoft/mycli ]; then
            echo "    └── mycli/"
            echo "        ├── bin/ ($(ls /usr/local/microsoft/mycli/bin/ | wc -l) files)"
            echo "        ├── lib/"
            if [ -d /usr/local/microsoft/mycli/lib/python3.12 ]; then
              echo "        │   └── python3.12/"
              echo "        │       └── site-packages/ ($(ls /usr/local/microsoft/mycli/lib/python3.12/site-packages/ | wc -l) packages)"
            fi
            echo "        └── other files: $(find /usr/local/microsoft/mycli -maxdepth 1 -type f | wc -l)"
          else
            echo "   (no mycli directory)"
          fi

      - name: Test executable functionality
        run: |
          echo "=== Functional Testing ==="

          # Test basic execution
          echo "1. Version check:"
          mycli --version

          echo ""
          echo "2. Help output:"
          mycli --help | head -10

          echo ""
          echo "3. Status command:"
          mycli status || true

          echo ""
          echo "4. Python module execution (direct):"
          /usr/local/microsoft/mycli/bin/python3 -m mycli_app --version

      - name: Test launcher script robustness
        run: |
          echo "=== Launcher Script Testing ==="

          # Test script contents
          echo "1. Launcher script content:"
          head -20 /usr/local/bin/mycli

          echo ""
          echo "2. Script permissions:"
          ls -la /usr/local/bin/mycli

          echo ""
          echo "3. Python resolution test:"
          # Test what Python the launcher finds
          echo 'Testing Python resolution in launcher context...'
          bash -c 'VENV_DIR="/usr/local/microsoft/mycli"; echo "Python found: ${VENV_DIR}/bin/python3"; ls -la "${VENV_DIR}/bin/python3"'

      - name: Test installation integrity
        run: |
          echo "=== Installation Integrity Check ==="

          # Check for common issues
          echo "1. Import test:"
          /usr/local/microsoft/mycli/bin/python3 -c "import mycli_app; print('✅ Module imports successfully')"

          echo ""
          echo "2. Dependency check (sample):"
          /usr/local/microsoft/mycli/bin/python3 -c "import click, colorama; print('✅ Basic dependencies available')"

          echo ""
          echo "3. Azure dependencies (if broker extras included):"
          if /usr/local/microsoft/mycli/bin/python3 -c "import azure.identity" 2>/dev/null; then
            echo "✅ Azure dependencies available"
          else
            echo "⚠️  Azure dependencies not available (may be expected)"
          fi

          echo ""
          echo "4. Virtual environment integrity:"
          /usr/local/microsoft/mycli/bin/python3 -c "import sys; print(f'Python: {sys.version}'); print(f'Executable: {sys.executable}')"

      - name: Test with different working directories
        run: |
          echo "=== Working Directory Independence Test ==="

          # Test from different directories
          cd /tmp
          echo "From /tmp:"
          mycli --version

          cd /Users
          echo "From /Users:"
          mycli --version

          cd "$HOME"
          echo "From home directory:"
          mycli --version

          echo "✅ Works from different working directories"

      - name: Performance check
        run: |
          echo "=== Performance Check ==="

          echo "Testing startup time..."
          time mycli --version >/dev/null

          echo ""
          echo "Installation size:"
          echo "Total installation: $(du -sh /usr/local/microsoft/mycli | cut -f1)"
          echo "Executable: $(du -sh /usr/local/bin/mycli | cut -f1)"

      - name: Test authentication workflow (non-blocking)
        run: |
          echo "=== Authentication Test (Non-blocking) ==="

          # Test broker authentication if available (but don't fail if it doesn't work in CI)
          set +e
          mycli login --force-broker 2>&1 | head -20
          echo ""
          echo "Authentication test completed (errors expected in CI environment)"
          set -e

      - name: Cleanup and uninstall test
        run: |
          echo "=== Cleanup Test ==="

          # Test manual uninstall (since this was direct PKG installation)
          echo "Uninstalling manually (no package manager for direct PKG)..."
          sudo rm -f /usr/local/bin/mycli
          sudo rm -rf /usr/local/microsoft/mycli

          echo ""
          echo "Verifying removal:"
          if command -v mycli >/dev/null 2>&1; then
            echo "❌ mycli still available after uninstall"
            which mycli
            ls -la "$(which mycli)" || true
          else
            echo "✅ mycli successfully removed from PATH"
          fi

          if [ -f /usr/local/bin/mycli ]; then
            echo "❌ Executable still exists at /usr/local/bin/mycli"
          else
            echo "✅ Executable successfully removed"
          fi

          if [ -d /usr/local/microsoft/mycli ]; then
            echo "❌ Runtime still exists at /usr/local/microsoft/mycli"
          else
            echo "✅ Runtime successfully removed"
          fi

      - name: Test summary
        if: always()
        run: |
          echo "=== Test Summary ==="
          echo "Platform: ${{ matrix.runner }} (${{ matrix.arch }})"
          echo "Installation method: Direct PKG (sudo installer)"
          echo "Test completed at: $(date)"

          if [ "${{ job.status }}" = "success" ]; then
            echo "✅ All tests passed successfully"
          else
            echo "❌ Some tests failed - check logs above"
          fi
