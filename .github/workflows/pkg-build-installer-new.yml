name: Build PKG Installer (Enhanced)

on:
    workflow_dispatch:
        inputs:
            version:
                description: "Version to build (e.g., 2.0.0). If not provided, will use version from __init__.py"
                required: false
                type: string
            use_distribution:
                description: "Use productbuild for distribution package with custom installer UI"
                required: false
                type: boolean
                default: false
            create_release:
                description: "Create GitHub release with built artifacts"
                required: false
                type: boolean
                default: false

env:
    PYTHON_VERSION: "3.12"

jobs:
    build-pkg:
        name: Build PKG (${{ matrix.platform_tag }})
        runs-on: macos-latest

        strategy:
            matrix:
                platform_tag:
                    - macos-arm64
                    - macos-x86_64

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Set VERSION environment variable
              run: |
                  if [ -n "${{ inputs.version }}" ]; then
                    echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
                    echo "Using provided version: ${{ inputs.version }}"
                  else
                    # Extract version from __init__.py if not provided
                    VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from mycli_app import __version__; print(__version__)")
                    echo "VERSION=$VERSION" >> $GITHUB_ENV
                    echo "Using version from __init__.py: $VERSION"
                  fi

            - name: Install build dependencies
              run: |
                  python -m pip install --upgrade pip setuptools wheel

            - name: Create dist directory
              run: mkdir -p dist/pkg_artifacts

            - name: Build PKG installer (Enhanced)
              run: |
                  EXTRA_ARGS=""
                  if [ "${{ inputs.use_distribution }}" = "true" ]; then
                    EXTRA_ARGS="--use-distribution"
                    echo "Building with productbuild (distribution package)"
                  else
                    echo "Building with pkgbuild (component package)"
                  fi
                  python scripts/build_pkg_installer_new.py --platform-tag ${{ matrix.platform_tag }} $EXTRA_ARGS

            - name: Verify .pkg creation
              working-directory: dist/pkg_artifacts
              run: |
                  VERSION="${{ env.VERSION }}"
                  PKG_FILE="mycli-${VERSION}-${{ matrix.platform_tag }}.pkg"
                  SHA_FILE="${PKG_FILE}.sha256"

                  echo "=== PKG Build Verification ==="
                  if [ -f "$PKG_FILE" ]; then
                    echo "✅ PKG file created: $PKG_FILE"
                    echo "📦 Size: $(du -h "$PKG_FILE" | cut -f1)"
                  else
                    echo "❌ PKG file missing: $PKG_FILE"
                    exit 1
                  fi

                  if [ -f "$SHA_FILE" ]; then
                    echo "✅ SHA256 file created: $SHA_FILE"
                    echo "🔍 Checksum: $(cat "$SHA_FILE")"
                  else
                    echo "❌ SHA256 file missing: $SHA_FILE"
                    exit 1
                  fi

            - name: Upload PKG artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: pkg-installer-${{ matrix.platform_tag }}
                  path: |
                      dist/pkg_artifacts/*.pkg
                      dist/pkg_artifacts/*.sha256
                  retention-days: 30

            - name: Test PKG installation (dry run)
              run: |
                  VERSION="${{ env.VERSION }}"
                  PKG_FILE="dist/pkg_artifacts/mycli-${VERSION}-${{ matrix.platform_tag }}.pkg"

                  echo "=== PKG Installation Test (Dry Run) ==="
                  echo "📋 PKG Info:"
                  pkgutil --check-signature "$PKG_FILE" || echo "⚠️  Package not signed (expected for development)"

                  echo "📋 Package Contents:"
                  pkgutil --payload-files "$PKG_FILE" | head -20

                  echo "📋 Package Metadata:"
                  pkgutil --pkg-info-plist "$PKG_FILE"

    create-release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        needs: build-pkg
        if: ${{ inputs.create_release }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Set VERSION environment variable
              run: |
                  if [ -n "${{ inputs.version }}" ]; then
                    echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
                  else
                    VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from mycli_app import __version__; print(__version__)")
                    echo "VERSION=$VERSION" >> $GITHUB_ENV
                  fi

            - name: Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: release-artifacts

            - name: Organize release files
              run: |
                  mkdir -p release-files
                  find release-artifacts -name "*.pkg" -exec cp {} release-files/ \;
                  find release-artifacts -name "*.sha256" -exec cp {} release-files/ \;

                  echo "=== Release Files ==="
                  ls -la release-files/

            - name: Create Release
              uses: softprops/action-gh-release@v1
              with:
                  tag_name: v${{ env.VERSION }}
                  name: MyCLI v${{ env.VERSION }} (Enhanced PKG)
                  body: |
                      # MyCLI v${{ env.VERSION }} - Enhanced PKG Installer

                      This release includes enhanced macOS PKG installers with support for both simple and distribution builds.

                      ## Installation Methods

                      ### Homebrew Cask (Recommended)
                      ```bash
                      brew install --cask mycli-app-pkg-pj2
                      ```

                      ### Direct PKG Installation
                      Download the appropriate PKG file for your architecture:
                      - **Apple Silicon (M1/M2/M3)**: `mycli-${{ env.VERSION }}-macos-arm64.pkg`
                      - **Intel**: `mycli-${{ env.VERSION }}-macos-x86_64.pkg`

                      Install with:
                      ```bash
                      sudo installer -pkg mycli-${{ env.VERSION }}-macos-<arch>.pkg -target /
                      ```

                      ## Build Details
                      - **Build Method**: ${{ inputs.use_distribution && 'productbuild (distribution)' || 'pkgbuild (component)' }}
                      - **Python Version**: ${{ env.PYTHON_VERSION }}
                      - **Installation Location**: `/usr/local/bin/mycli` → `/usr/local/libexec/mycli-venv/`

                      ## Verification
                      Verify package integrity using the provided SHA256 checksums.

                      Built with the enhanced PKG installer system supporting both simple and professional installer experiences.
                  files: release-files/*
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    summary:
        name: Build Summary
        runs-on: ubuntu-latest
        needs: build-pkg
        if: always()

        steps:
            - name: Build Summary
              run: |
                  echo "# PKG Build Summary (Enhanced)" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## Configuration" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version**: \`${{ inputs.version || 'auto-detected' }}\`" >> $GITHUB_STEP_SUMMARY
                  echo "- **Build Method**: ${{ inputs.use_distribution && 'productbuild (distribution)' || 'pkgbuild (component)' }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **Script Used**: \`build_pkg_installer_new.py\`" >> $GITHUB_STEP_SUMMARY
                  echo "- **Create Release**: ${{ inputs.create_release }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "## Build Status" >> $GITHUB_STEP_SUMMARY
                  echo "- **macOS ARM64**: ${{ needs.build-pkg.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **macOS x86_64**: ${{ needs.build-pkg.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  if [ "${{ inputs.use_distribution }}" = "true" ]; then
                    echo "## Distribution Build Features" >> $GITHUB_STEP_SUMMARY
                    echo "- Custom installer UI with productbuild" >> $GITHUB_STEP_SUMMARY
                    echo "- Professional installer experience" >> $GITHUB_STEP_SUMMARY
                    echo "- Distribution XML with package references" >> $GITHUB_STEP_SUMMARY
                  else
                    echo "## Simple Build Features" >> $GITHUB_STEP_SUMMARY
                    echo "- Component package with pkgbuild" >> $GITHUB_STEP_SUMMARY
                    echo "- Perfect for Homebrew Cask distribution" >> $GITHUB_STEP_SUMMARY
                    echo "- Silent installation experience" >> $GITHUB_STEP_SUMMARY
                  fi
