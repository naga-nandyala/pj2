name: (venv bundle) - homebrew update

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version to sync to the tap (e.g. 1.0.0). Leave empty to use latest release."
        required: false
        type: string
      force_format_refresh:
        description: "Force a commit even if content is identical (appends timestamp comment)."
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"
      always_commit:
        description: "Always create a commit even when unchanged (adds timestamp comment)."
        required: false
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

permissions:
  contents: write

jobs:
  update-cask:
    runs-on: ubuntu-latest
    steps:
      - name: Check out source repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine target version
        id: get_version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION=${VERSION#v}
          elif [ -n "${{ github.event.inputs.version }}" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=$(gh release list --limit 10 --json tagName,publishedAt --jq 'sort_by(.publishedAt) | reverse | .[0].tagName')
            VERSION=${VERSION#v}
          fi
          if [ -z "$VERSION" ]; then
            echo "Unable to resolve version" >&2
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Synchronising Homebrew tap for version $VERSION"

      - name: Download release tarballs
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          rm -f *.tar.gz
          gh release download "v$VERSION" --pattern "*.tar.gz"
          ls -al *.tar.gz

      - name: Calculate SHA256 checksums
        id: shas
        run: |
          set -euo pipefail
          ARM64_TARBALL=$(find . -maxdepth 1 -name '*.tar.gz' | grep -E '(arm64|aarch64)\.tar\.gz$' | head -1)
          X86_TARBALL=$(find . -maxdepth 1 -name '*.tar.gz' | grep -E 'x86_64\.tar\.gz$' | head -1)
          if [ -z "$ARM64_TARBALL" ] || [ -z "$X86_TARBALL" ]; then
            echo "Expected both arm64 and x86_64 tarballs" >&2
            ls -al
            exit 1
          fi
          ARM64_SHA=$(shasum -a 256 "$ARM64_TARBALL" | cut -d' ' -f1)
          X86_SHA=$(shasum -a 256 "$X86_TARBALL" | cut -d' ' -f1)
          echo "arm64_filename=$(basename "$ARM64_TARBALL")" >> "$GITHUB_OUTPUT"
          echo "x86_filename=$(basename "$X86_TARBALL")" >> "$GITHUB_OUTPUT"
          echo "arm64_sha=$ARM64_SHA" >> "$GITHUB_OUTPUT"
          echo "x86_sha=$X86_SHA" >> "$GITHUB_OUTPUT"
          echo "arm64: $ARM64_TARBALL -> $ARM64_SHA"
          echo "x86_64: $X86_TARBALL -> $X86_SHA"

      - name: Check out Homebrew tap repository
        uses: actions/checkout@v4
        with:
          repository: naga-nandyala/homebrew-mycli-app
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          persist-credentials: false
          path: homebrew-tap

      - name: Configure tap push credentials
        run: |
          TAP_PAT="${{ secrets.HOMEBREW_TAP_TOKEN }}"
          if [ -z "$TAP_PAT" ]; then
            echo "HOMEBREW_TAP_TOKEN (or fallback GITHUB_TOKEN) is required to push to naga-nandyala/homebrew-mycli-app." >&2
            echo "Create a fine-grained personal access token with repo:write and add it as HOMEBREW_TAP_TOKEN." >&2
            exit 1
          fi
          cd homebrew-tap
          git remote set-url origin "https://x-access-token:${TAP_PAT}@github.com/naga-nandyala/homebrew-mycli-app.git"

      - name: Update cask file
        run: |
          set -euo pipefail
          VERSION="${{ steps.get_version.outputs.version }}"
          ARM64_SHA="${{ steps.shas.outputs.arm64_sha }}"
          X86_SHA="${{ steps.shas.outputs.x86_sha }}"
          ARM64_FILE="${{ steps.shas.outputs.arm64_filename }}"
          X86_FILE="${{ steps.shas.outputs.x86_filename }}"

          cd homebrew-tap
          mkdir -p Casks
          python -c 'import textwrap, pathlib; pathlib.Path("Casks/mycli-app-venv-pj2.rb").write_text(textwrap.dedent("""\
            # NOTE: Auto-generated by naga-nandyala/pj2 workflow. Do not edit manually.
            cask "mycli-app-venv-pj2" do
              version "__VERSION__"

              on_arm do
                sha256 "__ARM64_SHA__"
                url "https://github.com/naga-nandyala/pj2/releases/download/v#{version}/__ARM64_FILE__"
                binary "mycli-__VERSION__-macos-arm64/bin/mycli", target: "mycli"
              end

              on_intel do
                sha256 "__X86_SHA__"
                url "https://github.com/naga-nandyala/pj2/releases/download/v#{version}/__X86_FILE__"
                binary "mycli-__VERSION__-macos-x86_64/bin/mycli", target: "mycli"
              end

              name "MyCLI App (venv bundle)"
              desc "Azure-inspired CLI packaged with an embedded Python runtime"
              homepage "https://github.com/naga-nandyala/pj2"

              depends_on macos: ">= :catalina"

              caveats <<~EOS
                Installs a portable Python virtual environment containing all dependencies.

                Basic usage:
                  mycli --help
                  mycli login
                  mycli status

                To install the PyInstaller build instead:
                  brew install naga-nandyala/mycli-app/mycli-app
              EOS
            end
          """), encoding="utf-8")'

          sed -i.bak "s/__VERSION__/$VERSION/g" Casks/mycli-app-venv-pj2.rb
          sed -i.bak "s/__ARM64_SHA__/$ARM64_SHA/g" Casks/mycli-app-venv-pj2.rb
          sed -i.bak "s/__X86_SHA__/$X86_SHA/g" Casks/mycli-app-venv-pj2.rb
          sed -i.bak "s/__ARM64_FILE__/$ARM64_FILE/g" Casks/mycli-app-venv-pj2.rb
          sed -i.bak "s/__X86_FILE__/$X86_FILE/g" Casks/mycli-app-venv-pj2.rb
          rm -f Casks/mycli-app-venv-pj2.rb.bak

          if [ "${{ github.event.inputs.force_format_refresh }}" = "true" ]; then
            echo "# Regenerated: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> Casks/mycli-app-venv-pj2.rb
          fi

          if grep -q '__' Casks/mycli-app-venv-pj2.rb; then
            echo "Placeholder substitution failed" >&2
            sed -n '1,80p' Casks/mycli-app-venv-pj2.rb
            exit 1
          fi

          ruby -c Casks/mycli-app-venv-pj2.rb
          head -40 Casks/mycli-app-venv-pj2.rb

      - name: Show pending diff
        run: |
          cd homebrew-tap
          git add -N Casks/mycli-app-venv-pj2.rb || true
          echo '--- BEGIN DIFF ---'
          git diff --color=always Casks/mycli-app-venv-pj2.rb || true
          echo '--- END DIFF ---'

      - name: Commit and push
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          cd homebrew-tap
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git config user.name "github-actions[bot]"
          git add Casks/mycli-app-venv-pj2.rb
          if git diff --cached --quiet; then
            if [ "${{ github.event.inputs.always_commit }}" = "true" ]; then
              echo "No diff but always_commit requested – appending timestamp"
              echo "# Recommitted: $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> Casks/mycli-app-venv-pj2.rb
              git add Casks/mycli-app-venv-pj2.rb
            else
              echo "Cask already up to date for version $VERSION"; exit 0;
            fi
          fi
          git commit -m "Update mycli-app-venv-pj2 cask to $VERSION (auto-generated)"
          git push origin main
          echo "✅ Homebrew tap updated"
