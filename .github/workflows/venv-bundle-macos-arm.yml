name: Release virtualenv bundles (macOS)

on:
  workflow_dispatch:

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Check out source
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          VERSION=$(python - <<'PY'
          import ast
          from pathlib import Path

          init_path = Path("src/mycli_app/__init__.py")
          source = init_path.read_text(encoding="utf-8")
          module = ast.parse(source, filename=str(init_path))

          for node in module.body:
              if isinstance(node, ast.Assign):
                  for target in node.targets:
                      if isinstance(target, ast.Name) and target.id == "__version__":
                          value = node.value
                          if isinstance(value, ast.Constant) and isinstance(value.value, str):
                              print(value.value)
                              raise SystemExit

          raise SystemExit("Version not found")
          PY
          )
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

  build:
    needs: prepare
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        include:
          - runner: macos-14
            arch: arm64
            platform_tag: macos-arm64
          - runner: macos-13
            arch: x86_64
            platform_tag: macos-x86_64
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Check out source
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      - name: Build virtualenv bundle
        run: python scripts/build_venv_bundle.py --platform-tag ${{ matrix.platform_tag }}

      - name: Rename artifacts with version
        working-directory: dist/artifacts
        run: |
          mv mycli-${{ matrix.platform_tag }} mycli-${VERSION}-${{ matrix.platform_tag }}
          mv mycli-${{ matrix.platform_tag }}.tar.gz mycli-${VERSION}-${{ matrix.platform_tag }}.tar.gz
          mv mycli-${{ matrix.platform_tag }}.tar.gz.sha256 mycli-${VERSION}-${{ matrix.platform_tag }}.tar.gz.sha256

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: venv-${{ matrix.platform_tag }}
          path: |
            dist/artifacts/mycli-${VERSION}-${{ matrix.platform_tag }}/
            dist/artifacts/mycli-${VERSION}-${{ matrix.platform_tag }}.tar.gz
            dist/artifacts/mycli-${VERSION}-${{ matrix.platform_tag }}.tar.gz.sha256

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.prepare.outputs.version }}
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts
          merge-multiple: true

      - name: List release files
        run: |
          ls -R release_artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          cp release_artifacts/dist/artifacts/mycli-${VERSION}-macos-arm64.tar.gz release/
          cp release_artifacts/dist/artifacts/mycli-${VERSION}-macos-arm64.tar.gz.sha256 release/
          cp release_artifacts/dist/artifacts/mycli-${VERSION}-macos-x86_64.tar.gz release/
          cp release_artifacts/dist/artifacts/mycli-${VERSION}-macos-x86_64.tar.gz.sha256 release/

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          name: v${{ env.VERSION }}
          generate_release_notes: true
          files: |
            release/mycli-${{ env.VERSION }}-macos-arm64.tar.gz
            release/mycli-${{ env.VERSION }}-macos-arm64.tar.gz.sha256
            release/mycli-${{ env.VERSION }}-macos-x86_64.tar.gz
            release/mycli-${{ env.VERSION }}-macos-x86_64.tar.gz.sha256
